FAIL src/tests/System/App.test.ts (6.504 s)
  App Router Integration
    ✕ CP11 - /auth responde 200 (272 ms)
    ✕ CP12 - /plants responde 200 (85 ms)
    ✕ CP13 - /stages responde 200 (17 ms)
    ✕ CP14 - /events responde 200 (29 ms)

  ● App Router Integration › CP11 - /auth responde 200

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

       6 |   test("CP11 - /auth responde 200", async () => {
       7 |     const res = await request(app).get("/auth");
    >  8 |     expect(res.status).toBe(200);
         |                        ^
       9 |   });
      10 |
      11 |   test("CP12 - /plants responde 200", async () => {

      at src/tests/System/App.test.ts:8:24
      at fulfilled (src/tests/System/App.test.ts:5:58)

  ● App Router Integration › CP12 - /plants responde 200

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      13 |       .get("/plants")
      14 |       .set("Authorization", "Bearer TOKEN_VALIDO");
    > 15 |     expect(res.status).toBe(200);
         |                        ^
      16 |   });
      17 |
      18 |   test("CP13 - /stages responde 200", async () => {

      at src/tests/System/App.test.ts:15:24
      at fulfilled (src/tests/System/App.test.ts:5:58)

  ● App Router Integration › CP13 - /stages responde 200

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      18 |   test("CP13 - /stages responde 200", async () => {
      19 |     const res = await request(app).get("/stages");
    > 20 |     expect(res.status).toBe(200);
         |                        ^
      21 |   });
      22 |
      23 |   test("CP14 - /events responde 200", async () => {

      at src/tests/System/App.test.ts:20:24
      at fulfilled (src/tests/System/App.test.ts:5:58)

  ● App Router Integration › CP14 - /events responde 200

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      23 |   test("CP14 - /events responde 200", async () => {
      24 |     const res = await request(app).get("/events");
    > 25 |     expect(res.status).toBe(200);
         |                        ^
      26 |   });
      27 | });
      28 |

      at src/tests/System/App.test.ts:25:24
      at fulfilled (src/tests/System/App.test.ts:5:58)

Test Suites: 1 failed, 1 total
Tests:       4 failed, 4 total
Snapshots:   0 total
Time:        6.664 s, estimated 10 s
Ran all test suites matching src/tests/System/App.test.ts.

  ●  Cannot log after tests are done. Did you forget to wait for something async in your test?
    Attempted to log "Base de datos sincronizada y relaciones configuradas exitosamente.".

       96 |
       97 |
    >  98 | export const databaseRelationManager = new DatabaseRelationManager();
          |                     ^
       99 |
      100 |
      101 |  async function setupRelations() {

      at console.log (node_modules/@jest/console/build/index.js:311:10)
      at src/Database/DatabaseRelationManager.ts:98:21
      at fulfilled (src/Database/DatabaseRelationManager.ts:5:58)

Jest did not exit one second after the test run has completed.

'This usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.

  ●  Cannot log after tests are done. Did you forget to wait for something async in your test?
    Attempted to log "[Error: connack timeout]".

      68 |           this.SendMessageVentilador(topic, message)
      69 |           break;
    > 70 |
         | ^
      71 |           case this.topiclevelWater:
      72 |               this.sendMessageLevelWater(topic, message)
      73 |             break;

      at console.log (node_modules/@jest/console/build/index.js:311:10)
      at MqttClient.<anonymous> (src/PlantReadings/Infrestructure/Mqtt/MqttClient.ts:70:54)
      at Timeout._onTimeout (node_modules/mqtt/src/lib/client.ts:885:9)


  ●  Cannot log after tests are done. Did you forget to wait for something async in your test?
    Attempted to log "Conexión cerrada".

      69 |           break;
      70 |
    > 71 |           case this.topiclevelWater:
         |                                     ^
      72 |               this.sendMessageLevelWater(topic, message)
      73 |             break;
      74 |

      at console.log (node_modules/@jest/console/build/index.js:311:10)
      at MqttClient.<anonymous> (src/PlantReadings/Infrestructure/Mqtt/MqttClient.ts:71:49)
      at Socket.<anonymous> (node_modules/mqtt/src/lib/client.ts:809:9)


  ●  Cannot log after tests are done. Did you forget to wait for something async in your test?
    Attempted to log "[Error: connack timeout]".

      12 |
      13 |         });
    > 14 |
         | ^
      15 |         this.client.on('error', (error) => {
      16 |             console.log(error);
      17 |

      at console.log (node_modules/@jest/console/build/index.js:311:10)
      at MqttClient.<anonymous> (src/Events/Infrestructure/mqtt/MqttPublisher.ts:14:21)
      at Timeout._onTimeout (node_modules/mqtt/src/lib/client.ts:885:9)


ReferenceError: You are trying to `import` a file after the Jest environment has been torn down. From src/tests/System/App.test.ts.

      at new Writable (node_modules/mqtt/node_modules/readable-stream/lib/internal/streams/writable.js:211:36)
      at MqttClient.connect (node_modules/mqtt/src/lib/client.ts:726:20)
      at MqttClient._reconnect (node_modules/mqtt/src/lib/client.ts:1706:9)
      at Timeout._onTimeout (node_modules/mqtt/src/lib/client.ts:1731:10)
/home/diego/Descargas/SensorHexagonal-main/node_modules/mqtt/node_modules/readable-stream/lib/internal/streams/writable.js:211
  const isDuplex = this instanceof require('./duplex')
                        ^

[TypeError: Right-hand side of 'instanceof' is not callable]

Node.js v18.19.0
diego@debian:~/Descargas/SensorHexagonal-main$ npx jest src/tests/Services/SocketIOServer.test.ts > reporte-SocketIOServer.txt
FAIL src/tests/Services/SocketIOServer.test.ts (9.27 s)
  ExternalWebsocketIo
    ✕ CP24 - Inicializa socket y emite evento (5004 ms)

  ● ExternalWebsocketIo › CP24 - Inicializa socket y emite evento

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      2 |
      3 | describe("ExternalWebsocketIo", () => {
    > 4 |   test("CP24 - Inicializa socket y emite evento", async () => {
        |   ^
      5 |     const socket = new ExternalWebsocketIo();
      6 |     await expect(
      7 |       socket.sendMessage("evento-prueba", { test: 123 })

      at src/tests/Services/SocketIOServer.test.ts:4:3
      at Object.<anonymous> (src/tests/Services/SocketIOServer.test.ts:3:1)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 1 total
Snapshots:   0 total
Time:        9.381 s, estimated 14 s
Ran all test suites matching src/tests/Services/SocketIOServer.test.ts.
Jest did not exit one second after the test run has completed.

'This usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.
